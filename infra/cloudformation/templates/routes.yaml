---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Vpc Subnet Routes Configuration"

## Stack Parameters
Parameters:
  Environment:
    Description: "Workload Environment (dev/prod) (Required)"
    Type: String

  OwnedBy:
    Description: Owner tag to be used while cleaning the rss
    Type: String
    Default: rekhanag

## Stack Resources
Resources:
  IngressSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        "Fn::ImportValue": !Sub "${Environment}-vpc"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub "${Environment}-vpc", ingress-subnets-route-table ] ]
        - Key: environment
          Value: !Ref Environment
        - Key: ownedBy
          Value: !Ref OwnedBy

  IngressSubnetInternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref IngressSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        "Fn::ImportValue": !Sub ${Environment}-IgwId

  IngressSubnetARouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref IngressSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetIngressA ] ] 
    DependsOn: IngressSubnetRouteTable

  IngressSubnetBRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref IngressSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetIngressB ] ]
    DependsOn: IngressSubnetRouteTable

  IngressSubnetCRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref IngressSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetIngressC ] ]
    DependsOn: IngressSubnetRouteTable

  ApplicationSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        "Fn::ImportValue": !Sub "${Environment}-vpc"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub "${Environment}-vpc", application-subnets-route-table ] ]
        - Key: environment
          Value: !Ref Environment
        - Key: ownedBy
          Value: !Ref OwnedBy

  ApplicationSubnetARouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref ApplicationSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetApplicationA ] ] 
    DependsOn: ApplicationSubnetRouteTable

  ApplicationSubnetBRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref ApplicationSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetApplicationB ] ] 
    DependsOn: ApplicationSubnetRouteTable

  ApplicationSubnetCRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref ApplicationSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetApplicationC ] ]
    DependsOn: ApplicationSubnetRouteTable

  DatabaseSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        "Fn::ImportValue": !Sub "${Environment}-vpc"
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub "${Environment}-vpc", database-subnets-route-table ] ]
        - Key: environment
          Value: !Ref Environment
        - Key: ownedBy
          Value: !Ref OwnedBy

  DatabaseSubnetARouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DatabaseSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetDatabaseA ] ]
    DependsOn: DatabaseSubnetRouteTable

  DatabaseSubnetBRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DatabaseSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetDatabaseB ] ]
    DependsOn: DatabaseSubnetRouteTable

  DatabaseSubnetCRouteAsso:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DatabaseSubnetRouteTable
      SubnetId:
        "Fn::ImportValue": !Join [ "-", [ !Sub "${Environment}-vpc", SubnetDatabaseC ] ]
    DependsOn: DatabaseSubnetRouteTable

## Stack Outputs
Outputs:
  ApplicationRouteTable:
    Description: Route table associated with application subnets.
    Value: !Ref ApplicationSubnetRouteTable
    Export:
      Name: !Sub '${Environment}-ApplicationSubnetRouteId'
